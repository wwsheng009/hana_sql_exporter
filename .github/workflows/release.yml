name: Release

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
          - os: windows-latest
            platform: windows
            arch: amd64
          - os: windows-latest
            platform: windows
            arch: arm64
          - os: macos-latest
            platform: darwin
            arch: amd64
          - os: macos-latest
            platform: darwin
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"

      - name: Install 7-Zip (Windows)
        if: matrix.platform == 'windows'
        shell: powershell
        run: |
          $url = "https://www.7-zip.org/a/7z2301-x64.exe"
          $output = "7z-installer.exe"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process -FilePath $output -Args "/S" -Wait
          echo "C:\Program Files\7-Zip" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build and Package
        shell: bash
        run: |
          mkdir -p build/artifacts
          export GOOS=${{ matrix.platform }}
          export GOARCH=${{ matrix.arch }}
          echo "Building for $GOOS/$GOARCH..."
          
          # 确保构建目录存在且为空
          BUILD_DIR="build/${GOOS}_${GOARCH}"
          rm -rf "$BUILD_DIR"
          mkdir -p "$BUILD_DIR"
          
          # 执行构建
          if ! make build; then
            echo "Error: Build failed for $GOOS/$GOARCH"
            exit 1
          fi

          # 复制服务配置文件
          if [ "${{ matrix.platform }}" = "linux" ]; then
            cp hana_sql_exporter@.service "$BUILD_DIR/"
            cp hana_sql_exporter.sh "$BUILD_DIR/"
            cp examples/metrics/demo.toml "$BUILD_DIR/hana_sql_exporter.toml"
          fi
          
          # 创建压缩文件
          if [ "${{ matrix.platform }}" = "windows" ]; then
            OUTPUT="build/artifacts/hana_sql_exporter_${GOOS}_${GOARCH}.zip"
            cd "$BUILD_DIR"
            if command -v 7z &> /dev/null; then
              7z a "../../$OUTPUT" .
            else
              powershell -Command "Compress-Archive -Path '.\*' -DestinationPath '..\..\$OUTPUT' -Force"
            fi
          else
            OUTPUT="build/artifacts/hana_sql_exporter_${GOOS}_${GOARCH}.tar.gz"
            cd "$BUILD_DIR"
            tar -czf "../../$OUTPUT" .
          fi
          
          echo "Successfully built and packaged for $GOOS/$GOARCH"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hana_sql_exporter-${{ matrix.platform }}-${{ matrix.arch }}
          path: build/artifacts/*.*
          retention-days: 1
          if-no-files-found: error
          overwrite: false

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event.release
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Generate Release Notes
        run: |
          echo "## 构建信息" >> RELEASE_NOTES.md
          echo "* 版本: $(git describe --tags --always --dirty)" >> RELEASE_NOTES.md
          echo "* 构建时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> RELEASE_NOTES.md
          echo "\n## 支持平台" >> RELEASE_NOTES.md
          echo "* Linux (amd64, arm64)" >> RELEASE_NOTES.md
          echo "* Windows (amd64, arm64)" >> RELEASE_NOTES.md
          echo "* macOS (amd64, arm64)" >> RELEASE_NOTES.md

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*.*
          body_path: RELEASE_NOTES.md
          token: ${{ secrets.GITHUB_TOKEN }}